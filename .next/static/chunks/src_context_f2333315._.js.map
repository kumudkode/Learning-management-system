{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/aditk/Downloads/LMS_NEW/lms/src/context/AuthContext.tsx"],"sourcesContent":["// src/context/AuthContext.tsx\r\n'use client'\r\n\r\nimport { createContext, useContext, useState, useEffect, useCallback } from 'react'\r\nimport { useRouter } from 'next/navigation'\r\nimport { toast } from 'react-toastify'\r\n\r\nexport interface User {\r\n  id: string\r\n  email: string\r\n  firstName: string\r\n  lastName: string\r\n  role: 'student' | 'instructor' | 'admin'\r\n}\r\n\r\ninterface AuthContextType {\r\n  user: User | null\r\n  isLoading: boolean\r\n  login: (email: string, password: string) => Promise<void>\r\n  register: (userData: RegisterData) => Promise<void>\r\n  logout: () => void\r\n  isAuthenticated: boolean\r\n}\r\n\r\nexport interface RegisterData {\r\n  email: string\r\n  password: string\r\n  firstName: string\r\n  lastName: string\r\n  role?: 'student' | 'instructor' | 'admin'\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined)\r\n\r\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\r\n  const [user, setUser] = useState<User | null>(null)\r\n  const [isLoading, setIsLoading] = useState<boolean>(true)\r\n  const router = useRouter()\r\n\r\n  useEffect(() => {\r\n    // Check for saved auth state on initial load\r\n    const checkAuth = async () => {\r\n      try {\r\n        const token = localStorage.getItem('token')\r\n        if (!token) {\r\n          setIsLoading(false)\r\n          return\r\n        }\r\n\r\n        const response = await fetch('/api/auth/me', {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`\r\n          }\r\n        })\r\n\r\n        if (response.ok) {\r\n          const data = await response.json()\r\n          setUser(data.user)\r\n        } else {\r\n          // Invalid token\r\n          localStorage.removeItem('token')\r\n        }\r\n      } catch (error) {\r\n        console.error('Auth check error:', error)\r\n        toast.error('Failed to check authentication status.'); // Provide user feedback\r\n      } finally {\r\n        setIsLoading(false)\r\n      }\r\n    }\r\n\r\n    checkAuth()\r\n  }, [])\r\n\r\n  const login = useCallback(async (email: string, password: string) => {\r\n    setIsLoading(true)\r\n    try {\r\n      const response = await fetch('/api/auth/login', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ email, password })\r\n      })\r\n\r\n      if (!response.ok) {\r\n        const error = await response.json()\r\n        throw new Error(error.error || 'Login failed')\r\n      }\r\n\r\n      const data = await response.json()\r\n\r\n      // Save token and user data\r\n      localStorage.setItem('token', data.token)\r\n      setUser(data.user)\r\n\r\n      toast.success('Login successful!')\r\n      router.push('/dashboard')\r\n    } catch (error: unknown) {\r\n      let message = 'An unexpected error occurred.'; // Default message\r\n\r\n      if (error instanceof Error) {\r\n        message = error.message || message; // Use error message if available\r\n      }\r\n\r\n      toast.error(message);\r\n      throw error;\r\n    } finally {\r\n      setIsLoading(false)\r\n    }\r\n  }, [router, setUser, setIsLoading])\r\n\r\n  const register = useCallback(async (userData: RegisterData) => {\r\n    setIsLoading(true)\r\n    try {\r\n      const response = await fetch('/api/auth/register', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(userData)\r\n      })\r\n\r\n      if (!response.ok) {\r\n        const error = await response.json()\r\n        throw new Error(error.error || 'Registration failed')\r\n      }\r\n\r\n      const data = await response.json()\r\n\r\n      // Save token and user data\r\n      localStorage.setItem('token', data.token)\r\n      setUser(data.user)\r\n\r\n      toast.success('Registration successful!')\r\n      router.push('/dashboard')\r\n    } catch (error: unknown) {\r\n      let message = 'An unexpected error occurred.'; // Default message\r\n\r\n      if (error instanceof Error) {\r\n        message = error.message || message; // Use error message if available\r\n      }\r\n\r\n      toast.error(message);\r\n      throw error;\r\n    } finally {\r\n      setIsLoading(false)\r\n    }\r\n  }, [router, setUser, setIsLoading])\r\n\r\n  const logout = useCallback((): void => {\r\n    localStorage.removeItem('token')\r\n    setUser(null)\r\n    router.push('/auth/login')\r\n    toast.info('You have been logged out')\r\n  }, [router, setUser])\r\n\r\n  return (\r\n    <AuthContext.Provider value={{\r\n      user,\r\n      isLoading,\r\n      login,\r\n      register,\r\n      logout,\r\n      isAuthenticated: !!user\r\n    }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  )\r\n}\r\n\r\nexport function useAuth() {\r\n  const context = useContext(AuthContext)\r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider')\r\n  }\r\n  return context\r\n}\r\n// Update the register function in AuthContext.tsx\r\nconst register = async (email: string, password: string, name: string, role: string) => {\r\n  setIsLoading(true);\r\n  try {\r\n    // For development/testing, we'll use a mock successful response\r\n    // instead of calling a backend that doesn't exist yet\r\n    \r\n    // Simulate API call delay\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n    \r\n    // Mock successful registration\r\n    const mockUser = {\r\n      id: `user_${Date.now()}`,\r\n      email,\r\n      name,\r\n      role,\r\n      createdAt: new Date().toISOString()\r\n    };\r\n    \r\n    // Store user in localStorage to persist the session\r\n    localStorage.setItem('user', JSON.stringify(mockUser));\r\n    \r\n    // Update auth state\r\n    setUser(mockUser);\r\n    setIsLoading(false);\r\n    return { success: true, user: mockUser };\r\n    \r\n    /* \r\n    // When you have a real API, replace the above with:\r\n    const response = await fetch(`${process.env.API_BASE_URL}/auth/register`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ email, password, name, role }),\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(errorData.message || 'Registration failed');\r\n    }\r\n    \r\n    const data = await response.json();\r\n    localStorage.setItem('user', JSON.stringify(data.user));\r\n    setUser(data.user);\r\n    setIsLoading(false);\r\n    return data;\r\n    */\r\n    \r\n  } catch (error) {\r\n    setIsLoading(false);\r\n    console.error('Registration error:', error);\r\n    throw error;\r\n  }\r\n};"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 243, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/aditk/Downloads/LMS_NEW/lms/src/context/ThemeContext.tsx"],"sourcesContent":["// src/context/ThemeContext.tsx\r\n'use client'\r\n\r\nimport { createContext, useContext, useState, useEffect } from 'react'\r\n\r\ntype Theme = 'light' | 'dark'\r\n\r\ninterface ThemeContextType {\r\n  theme: Theme\r\n  toggleTheme: () => void\r\n}\r\n\r\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined)\r\n\r\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\r\n  const [theme, setTheme] = useState<Theme>('light')\r\n\r\n  useEffect(() => {\r\n    // Check for saved theme preference or use system preference\r\n    const savedTheme = localStorage.getItem('theme') as Theme | null\r\n    \r\n    if (savedTheme) {\r\n      setTheme(savedTheme)\r\n      document.documentElement.classList.toggle('dark', savedTheme === 'dark')\r\n    } else if (window.matchMedia('(prefers-color-scheme: dark)').matches) {\r\n      setTheme('dark')\r\n      document.documentElement.classList.add('dark')\r\n    }\r\n  }, [])\r\n\r\n  const toggleTheme = () => {\r\n    const newTheme = theme === 'light' ? 'dark' : 'light'\r\n    setTheme(newTheme)\r\n    localStorage.setItem('theme', newTheme)\r\n    document.documentElement.classList.toggle('dark')\r\n  }\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  )\r\n}\r\n\r\nexport function useTheme() {\r\n  const context = useContext(ThemeContext)\r\n  if (context === undefined) {\r\n    throw new Error('useTheme must be used within a ThemeProvider')\r\n  }\r\n  return context\r\n}"],"names":[],"mappings":"AAAA,+BAA+B;;;;;;AAG/B;;;AAFA;;AAWA,MAAM,6BAAe,CAAA,GAAA,6JAAA,CAAA,gBAAa,AAAD,EAAgC;AAE1D,SAAS,cAAc,EAAE,QAAQ,EAAiC;;IACvE,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAS;IAE1C,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;mCAAE;YACR,4DAA4D;YAC5D,MAAM,aAAa,aAAa,OAAO,CAAC;YAExC,IAAI,YAAY;gBACd,SAAS;gBACT,SAAS,eAAe,CAAC,SAAS,CAAC,MAAM,CAAC,QAAQ,eAAe;YACnE,OAAO,IAAI,OAAO,UAAU,CAAC,gCAAgC,OAAO,EAAE;gBACpE,SAAS;gBACT,SAAS,eAAe,CAAC,SAAS,CAAC,GAAG,CAAC;YACzC;QACF;kCAAG,EAAE;IAEL,MAAM,cAAc;QAClB,MAAM,WAAW,UAAU,UAAU,SAAS;QAC9C,SAAS;QACT,aAAa,OAAO,CAAC,SAAS;QAC9B,SAAS,eAAe,CAAC,SAAS,CAAC,MAAM,CAAC;IAC5C;IAEA,qBACE,6LAAC,aAAa,QAAQ;QAAC,OAAO;YAAE;YAAO;QAAY;kBAChD;;;;;;AAGP;GA5BgB;KAAA;AA8BT,SAAS;;IACd,MAAM,UAAU,CAAA,GAAA,6JAAA,CAAA,aAAU,AAAD,EAAE;IAC3B,IAAI,YAAY,WAAW;QACzB,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;AACT;IANgB","debugId":null}}]
}