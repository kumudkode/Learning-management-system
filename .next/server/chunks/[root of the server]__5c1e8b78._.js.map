{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 100, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Kumud/OneDrive/course/New%20Project/lms/src/models/User.ts"],"sourcesContent":["import mongoose, { Schema, Document } from 'mongoose';\n\ninterface IUser extends Document {\n  email: string;\n  password: string;\n  firstName: string;\n  lastName: string;\n  role: string;\n  createdAt: Date;\n}\n\nconst UserSchema: Schema = new Schema({\n  email: { type: String, required: true, unique: true },\n  password: { type: String, required: true },\n  firstName: { type: String, required: true },\n  lastName: { type: String },\n  role: { type: String, required: true },\n},{timestamps:true});\n\nexport default mongoose.models.User || mongoose.model<IUser>('User', UserSchema);"],"names":[],"mappings":";;;AAAA;;AAWA,MAAM,aAAqB,IAAI,yGAAA,CAAA,SAAM,CAAC;IACpC,OAAO;QAAE,MAAM;QAAQ,UAAU;QAAM,QAAQ;IAAK;IACpD,UAAU;QAAE,MAAM;QAAQ,UAAU;IAAK;IACzC,WAAW;QAAE,MAAM;QAAQ,UAAU;IAAK;IAC1C,UAAU;QAAE,MAAM;IAAO;IACzB,MAAM;QAAE,MAAM;QAAQ,UAAU;IAAK;AACvC,GAAE;IAAC,YAAW;AAAI;uCAEH,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,IAAI,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAQ,QAAQ","debugId":null}},
    {"offset": {"line": 136, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Kumud/OneDrive/course/New%20Project/lms/src/lib/db/connectDB.ts"],"sourcesContent":["import mongoose from 'mongoose';\n\nconst connectDB = async () => {\n  if (mongoose.connections[0].readyState) {\n    return;\n  }\n\n  try {\n    await mongoose.connect(process.env.MONGODB_URI || '', {\n      // useNewUrlParser: true,\n      // useUnifiedTopology: true,\n    });\n    console.log('MongoDB connected');\n  } catch (error) {\n    console.error('MongoDB connection error:', error);\n  }\n};\n\nexport default connectDB;"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,YAAY;IAChB,IAAI,yGAAA,CAAA,UAAQ,CAAC,WAAW,CAAC,EAAE,CAAC,UAAU,EAAE;QACtC;IACF;IAEA,IAAI;QACF,MAAM,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,QAAQ,GAAG,CAAC,WAAW,IAAI,IAAI;QAGtD;QACA,QAAQ,GAAG,CAAC;IACd,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,6BAA6B;IAC7C;AACF;uCAEe","debugId":null}},
    {"offset": {"line": 160, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Kumud/OneDrive/course/New%20Project/lms/src/app/api/auth/login/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\nimport bcrypt from \"bcryptjs\";\nimport jwt from \"jsonwebtoken\";\nimport mongoose from \"mongoose\";\nimport User from \"@/models/User\";\nimport connectDB from \"@/lib/db/connectDB\";\n\nconst JWT_SECRET = process.env.JWT_SECRET || \"your_jwt_secret\";\n\nexport async function POST(request: Request) {\n  await connectDB();\n\n  try {\n    const body = await request.json();\n    const { email, password } = body;\n\n    // Validate inputs\n    if (!email || !password) {\n      return NextResponse.json(\n        { success: false, message: \"Missing required fields\" },\n        { status: 400 }\n      );\n    }\n\n    // Check if user exists\n    const user = await User.findOne({ email });\n    if (!user) {\n      return NextResponse.json(\n        { success: false, message: \"Invalid email or password\" },\n        { status: 400 }\n      );\n    }\n\n    // Verify password\n    const isPasswordValid = await bcrypt.compare(password, user.password);\n    if (!isPasswordValid) {\n      return NextResponse.json(\n        { success: false, message: \"Invalid email or password\" },\n        { status: 400 }\n      );\n    }\n\n    // Generate JWT token\n    const token = jwt.sign(\n      { id: user._id, email: user.email, firstName:user.firstName, lastName:user.lastName, role: user.role },\n      JWT_SECRET,\n      { expiresIn: \"1d\" }\n    );\n\n    return NextResponse.json({\n      success: true,\n      token,\n      user: {\n        id: user._id,\n        email: user.email,\n        firstName:user.firstName,\n        lastName:user.lastName,\n        role: user.role,\n      },\n    });\n  } catch (error) {\n    console.error(\"Login error:\", error);\n    return NextResponse.json(\n      { success: false, message: \"Internal server error\" },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AAEA;AACA;;;;;;AAEA,MAAM,aAAa,QAAQ,GAAG,CAAC,UAAU,IAAI;AAEtC,eAAe,KAAK,OAAgB;IACzC,MAAM,CAAA,GAAA,+HAAA,CAAA,UAAS,AAAD;IAEd,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG;QAE5B,kBAAkB;QAClB,IAAI,CAAC,SAAS,CAAC,UAAU;YACvB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAAO,SAAS;YAA0B,GACrD;gBAAE,QAAQ;YAAI;QAElB;QAEA,uBAAuB;QACvB,MAAM,OAAO,MAAM,uHAAA,CAAA,UAAI,CAAC,OAAO,CAAC;YAAE;QAAM;QACxC,IAAI,CAAC,MAAM;YACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAAO,SAAS;YAA4B,GACvD;gBAAE,QAAQ;YAAI;QAElB;QAEA,kBAAkB;QAClB,MAAM,kBAAkB,MAAM,mIAAA,CAAA,UAAM,CAAC,OAAO,CAAC,UAAU,KAAK,QAAQ;QACpE,IAAI,CAAC,iBAAiB;YACpB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAAO,SAAS;YAA4B,GACvD;gBAAE,QAAQ;YAAI;QAElB;QAEA,qBAAqB;QACrB,MAAM,QAAQ,uIAAA,CAAA,UAAG,CAAC,IAAI,CACpB;YAAE,IAAI,KAAK,GAAG;YAAE,OAAO,KAAK,KAAK;YAAE,WAAU,KAAK,SAAS;YAAE,UAAS,KAAK,QAAQ;YAAE,MAAM,KAAK,IAAI;QAAC,GACrG,YACA;YAAE,WAAW;QAAK;QAGpB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT;YACA,MAAM;gBACJ,IAAI,KAAK,GAAG;gBACZ,OAAO,KAAK,KAAK;gBACjB,WAAU,KAAK,SAAS;gBACxB,UAAS,KAAK,QAAQ;gBACtB,MAAM,KAAK,IAAI;YACjB;QACF;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,gBAAgB;QAC9B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAAO,SAAS;QAAwB,GACnD;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}