{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/aditk/Downloads/LMS_NEW/lms/src/app/api/auth/register/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\r\n\r\nexport async function POST(request: Request) {\r\n  try {\r\n    const body = await request.json();\r\n    const { email, password, firstName, role } = body;\r\n    \r\n    // Validate inputs\r\n    if (!email || !password || !firstName || !role) {\r\n      return NextResponse.json(\r\n        { success: false, message: 'Missing required fields' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n    console.log(body);\r\n    // In a real app, you would:\r\n    // 1. Check if user already exists\r\n    // 2. Hash the password\r\n    // 3. Store in database\r\n    // 4. Create session/token\r\n    \r\n    // For now, return mock success\r\n    return NextResponse.json({\r\n      success: true,\r\n      user: {\r\n        id: `user_${Date.now()}`,\r\n        email,\r\n        firstName,\r\n        role,\r\n        createdAt: new Date().toISOString()\r\n      }\r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error('Registration error:', error);\r\n    return NextResponse.json(\r\n      { success: false, message: 'Internal server error' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}"],"names":[],"mappings":";;;AAAA;;AAEO,eAAe,KAAK,OAAgB;IACzC,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,SAAS,EAAE,IAAI,EAAE,GAAG;QAE7C,kBAAkB;QAClB,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,aAAa,CAAC,MAAM;YAC9C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAAO,SAAS;YAA0B,GACrD;gBAAE,QAAQ;YAAI;QAElB;QACA,QAAQ,GAAG,CAAC;QACZ,4BAA4B;QAC5B,kCAAkC;QAClC,uBAAuB;QACvB,uBAAuB;QACvB,0BAA0B;QAE1B,+BAA+B;QAC/B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,MAAM;gBACJ,IAAI,CAAC,KAAK,EAAE,KAAK,GAAG,IAAI;gBACxB;gBACA;gBACA;gBACA,WAAW,IAAI,OAAO,WAAW;YACnC;QACF;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,uBAAuB;QACrC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAAO,SAAS;QAAwB,GACnD;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}